{"version":3,"file":"backend-compiled-debug.js","sources":["webpack:///webpack/bootstrap 9ce3d1e61fcb91796df3","webpack:///./src/backend/MelbourneWeatherClient.ts","webpack:///./src/backend/index.ts","webpack:///./src/model/RainfallData.ts","webpack:///./src/model/TemperatureData.ts","webpack:///./src/model/WeatherLocationData.ts","webpack:///./src/model/index.ts","webpack:///external \"soap-as-promised\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9ce3d1e61fcb91796df3","import * as Soap from 'soap-as-promised';\r\nimport {WeatherLocationData, RainfallData, TemperatureData} from '../model/index';\r\ninterface RainfallRequestData {\r\n  parameters: string;\r\n}\r\ninterface TemperatureRequestData {\r\n  parameters: string;\r\n}\r\ninterface OnWeatherRetrievedListener {\r\n  onWeatherRetrieved(weatherLocationDataList: Array<WeatherLocationData>);\r\n}\r\ninterface OnLocationsRetrievedListener {\r\n  onLocationsRetrieved(locations: Array<string>);\r\n}\r\ninterface MelbourneWeatherServiceStub {\r\n  getLocations(locationRequestData: null): Promise<any>;\r\n  getRainfall(rainfallRequestData: RainfallRequestData): Promise<any>;\r\n  getTemperature(temperatureRequestData: TemperatureRequestData): Promise<any>;\r\n}\r\n/**\r\n * Creates a   client, designed for the MelbourneWeatherApi.\r\n */\r\nclass MelbourneWeatherClient {\r\n  weatherService: MelbourneWeatherServiceStub;\r\n  onWeatherPollCompleteListeners: Array<OnWeatherRetrievedListener>;\r\n  onLocationsPollCompleteListeners: Array<OnLocationsRetrievedListener>;\r\n  constructor(melbourneWeatherSoapClient: MelbourneWeatherServiceStub) {\r\n    this.weatherService = melbourneWeatherSoapClient;\r\n    this.onWeatherPollCompleteListeners = [];\r\n    this.onLocationsPollCompleteListeners = [];\r\n  }\r\n  addOnWeatherRetrievedListener(addedListener: OnWeatherRetrievedListener) {\r\n    this.onWeatherPollCompleteListeners.push(addedListener);\r\n  }\r\n  removeOnWeatherRetrievedListener(removedListener: OnWeatherRetrievedListener) {\r\n    this.onWeatherPollCompleteListeners.filter((listener) => {\r\n      return listener !== removedListener;\r\n    });\r\n  }\r\n  addOnLocationsRetrievedListener(addedListener: OnLocationsRetrievedListener) {\r\n    this.onLocationsPollCompleteListeners.push(addedListener);\r\n  }\r\n  removeOnLocationsRetrievedListener(removedListener: OnLocationsRetrievedListener) {\r\n    this.onLocationsPollCompleteListeners.filter((listener) => {\r\n      return listener !== removedListener;\r\n    });\r\n  }\r\n  retrieveLocations() {\r\n    this.weatherService.getLocations(null)\r\n    .then((locationsResponse) => {\r\n      let locations: Array<string> = locationsResponse.return;\r\n      this.onLocationsPollCompleteListeners.forEach(\r\n        (onLocationsPollCompleteListener: OnLocationsRetrievedListener) => {\r\n          onLocationsPollCompleteListener.onLocationsRetrieved(locations);\r\n        }\r\n      );\r\n    });\r\n  }\r\n  retrieveWeatherData(locations: Array<string>) {\r\n    let weatherLocationDataList: Array<WeatherLocationData> = [];\r\n    let weatherPromises: Array<Promise<any>> = [];\r\n    locations.forEach((location: string) => {\r\n      let temperatureData: TemperatureData;\r\n      let rainfallData: RainfallData;\r\n      \r\n      const temperatureRequestPromise: Promise<any> = \r\n        this.weatherService.getRainfall({parameters: location})\r\n        .then((temperatureResponse) => {\r\n          let temperatureStrings: Array<string> = temperatureResponse.return;\r\n          temperatureData = new TemperatureData(temperatureStrings[0], temperatureStrings[1]);\r\n        });\r\n      const rainfallRequestPromise: Promise<any> = \r\n        this.weatherService.getTemperature({parameters: location})\r\n        .then((rainfallResponse) => {\r\n          let rainfallStrings: Array<string> = rainfallResponse.return;\r\n          rainfallData = new RainfallData(rainfallStrings[0], rainfallStrings[1]);\r\n        });\r\n      let compileWeatherLocationDataPromises: Array<Promise<any>> = [temperatureRequestPromise, rainfallRequestPromise];\r\n      Promise.all(compileWeatherLocationDataPromises)\r\n      .then((responses) => {\r\n        let weatherData: WeatherLocationData = new WeatherLocationData(location, rainfallData, temperatureData);\r\n        weatherLocationDataList.push(weatherData);\r\n      });\r\n      weatherPromises.push(rainfallRequestPromise);\r\n      weatherPromises.push(temperatureRequestPromise);\r\n    });\r\n    Promise.all(weatherPromises).then((responses) => {\r\n      this.onWeatherPollCompleteListeners.forEach((onWeatherPollCompleteListener) => {\r\n        onWeatherPollCompleteListener.onWeatherRetrieved(weatherLocationDataList);\r\n      }\r\n      );\r\n    });\r\n  } \r\n}\r\n// TODO: There are a lot of optional settings we can set in this builder\r\nclass Builder {\r\n  build(): Promise<MelbourneWeatherClient> {\r\n    return new Promise<MelbourneWeatherClient>((resolve, reject) => {\r\n      Soap.createClient('http://viper.infotech.monash.edu.au:8180/axis2/services/MelbourneWeather2?wsdl')\r\n      .then((weatherService: MelbourneWeatherServiceStub) => {\r\n        let melbourneWeatherClient: MelbourneWeatherClient = new MelbourneWeatherClient(weatherService);\r\n        resolve(melbourneWeatherClient);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n}\r\nexport {Builder, MelbourneWeatherClient, OnWeatherRetrievedListener, OnLocationsRetrievedListener};\r\nexport default MelbourneWeatherClient;\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/backend/MelbourneWeatherClient.ts","import { Builder, OnWeatherRetrievedListener, OnLocationsRetrievedListener } from './MelbourneWeatherClient';\r\nimport { WeatherLocationData } from '../model/index';\r\nnew Builder()\r\n.build()\r\n.then(\r\n  (melbourneWeatherClient) => {\r\n    melbourneWeatherClient.addOnWeatherRetrievedListener(\r\n      new class implements OnWeatherRetrievedListener {\r\n        onWeatherRetrieved(weatherLocationDataList: Array<WeatherLocationData>) {\r\n          console .log(weatherLocationDataList);\r\n        }\r\n      }\r\n    );\r\n    melbourneWeatherClient.addOnLocationsRetrievedListener(\r\n      new class implements OnLocationsRetrievedListener {\r\n        onLocationsRetrieved(locations: Array<string>) {\r\n          console.log(locations);\r\n          setInterval(() => { melbourneWeatherClient.retrieveWeatherData(locations); }, 5000);\r\n        }\r\n      }\r\n    );\r\n    melbourneWeatherClient.retrieveLocations();\r\n  }\r\n);\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/backend/index.ts","class RainfallData {\r\n  rainfall: string;\r\n  timestamp: string;\r\n  constructor(rainfall: string, timestamp: string) {\r\n    this.rainfall = rainfall;\r\n    this.timestamp = timestamp;\r\n  }\r\n}\r\nexport {RainfallData};\r\nexport default RainfallData;\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/model/RainfallData.ts","class TemperatureData {\r\n  temperature: string;\r\n  timestamp: string;\r\n  constructor(temperature: string, timestamp: string) {\r\n    this.temperature = temperature;\r\n    this.timestamp = timestamp;\r\n  }\r\n}\r\nexport {TemperatureData};\r\nexport default TemperatureData;\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/model/TemperatureData.ts","import {RainfallData} from './RainfallData';\r\nimport {TemperatureData} from './TemperatureData';\r\nclass WeatherLocationData {\r\n    location: string;\r\n    rainfallData: RainfallData;\r\n    temperatureData: TemperatureData;\r\n    constructor(location: string, rainfallData: RainfallData, temperatureData: TemperatureData) {\r\n        this.location = location;   \r\n        this.rainfallData = rainfallData;\r\n        this.temperatureData = temperatureData;\r\n    }\r\n}\r\nexport {WeatherLocationData};\r\nexport default WeatherLocationData;\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/model/WeatherLocationData.ts","import {TemperatureData} from './TemperatureData';\r\nimport {RainfallData} from './RainfallData';\r\nimport {WeatherLocationData} from './WeatherLocationData';\r\nexport {TemperatureData};\r\nexport {RainfallData};\r\nexport {WeatherLocationData};\r\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/model/index.ts","module.exports = require(\"soap-as-promised\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"soap-as-promised\"\n// module id = 6\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;AChEA;AACA;AAkBA;;;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAiBA;AAfA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;AC9GA;AAEA;AAIA;AAEA;AACA;AACA;AAHA;AAMA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAOA;AACA;;;;;;;;;;ACtBA;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACTA;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACPA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACbA;AAGA;AAFA;AAGA;AAFA;AAGA;;;;;;ACLA;;;A","sourceRoot":""}