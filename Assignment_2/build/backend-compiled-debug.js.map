{"version":3,"file":"backend-compiled-debug.js","sources":["webpack:///webpack/bootstrap 208b99abc1aa968bac10","webpack:///./src/backend/MelbourneWeatherClient.ts","webpack:///./src/backend/index.ts","webpack:///./src/model/RainfallData.ts","webpack:///./src/model/TemperatureData.ts","webpack:///./src/model/WeatherLocationData.ts","webpack:///./src/model/index.ts","webpack:///external \"soap-as-promised\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 208b99abc1aa968bac10","import * as Soap from 'soap-as-promised';\nimport {WeatherLocationData, RainfallData, TemperatureData} from '../model/index';\n\ninterface RainfallRequestData {\n  parameters: string;\n}\ninterface TemperatureRequestData {\n  parameters: string;\n}\ninterface OnWeatherRetrievedListener {\n  onWeatherRetrieved(weatherLocationDataList: Array<WeatherLocationData>);\n}\ninterface OnLocationsRetrievedListener {\n  onLocationsRetrieved(locations: Array<string>);\n}\ninterface MelbourneWeatherServiceStub {\n  getLocations(locationRequestData: null): Promise<any>;\n  getRainfall(rainfallRequestData: RainfallRequestData): Promise<any>;\n  getTemperature(temperatureRequestData: TemperatureRequestData): Promise<any>;\n}\n/**\n * Creates a   client, designed for the MelbourneWeatherApi.\n */\nclass MelbourneWeatherClient {\n  weatherService: MelbourneWeatherServiceStub;\n  onWeatherPollCompleteListeners: Array<OnWeatherRetrievedListener>;\n  onLocationsPollCompleteListeners: Array<OnLocationsRetrievedListener>;\n\n  constructor(melbourneWeatherSoapClient: MelbourneWeatherServiceStub) {\n    this.weatherService = melbourneWeatherSoapClient;\n    this.onWeatherPollCompleteListeners = [];\n    this.onLocationsPollCompleteListeners = [];\n  }\n\n  addOnWeatherRetrievedListener(addedListener: OnWeatherRetrievedListener) {\n    this.onWeatherPollCompleteListeners.push(addedListener);\n  }\n\n  removeOnWeatherRetrievedListener(removedListener: OnWeatherRetrievedListener) {\n    this.onWeatherPollCompleteListeners.filter((listener) => {\n      return listener !== removedListener;\n    });\n  }\n\n  addOnLocationsRetrievedListener(addedListener: OnLocationsRetrievedListener) {\n    this.onLocationsPollCompleteListeners.push(addedListener);\n  }\n\n  removeOnLocationsRetrievedListener(removedListener: OnLocationsRetrievedListener) {\n    this.onLocationsPollCompleteListeners.filter((listener) => {\n      return listener !== removedListener;\n    });\n  }\n\n  retrieveLocations() {\n    this.weatherService.getLocations(null)\n    .then((locationsResponse) => {\n      let locations: Array<string> = locationsResponse.return;\n      this.onLocationsPollCompleteListeners.forEach(\n        (onLocationsPollCompleteListener: OnLocationsRetrievedListener) => {\n          onLocationsPollCompleteListener.onLocationsRetrieved(locations);\n        }\n      );\n    });\n  }\n\n  retrieveWeatherData(locations: Array<string>) {\n    let weatherLocationDataList: Array<WeatherLocationData> = [];\n    let weatherPromises: Array<Promise<any>> = [];\n    locations.forEach((location: string) => {\n      let temperatureData: TemperatureData;\n      let rainfallData: RainfallData;\n      \n      const temperatureRequestPromise: Promise<any> = \n        this.weatherService.getRainfall({parameters: location})\n        .then((temperatureResponse) => {\n          let temperatureStrings: Array<string> = temperatureResponse.return;\n          temperatureData = new TemperatureData(temperatureStrings[0], temperatureStrings[1]);\n        });\n      const rainfallRequestPromise: Promise<any> = \n        this.weatherService.getTemperature({parameters: location})\n        .then((rainfallResponse) => {\n          let rainfallStrings: Array<string> = rainfallResponse.return;\n          rainfallData = new RainfallData(rainfallStrings[0], rainfallStrings[1]);\n        });\n      let compileWeatherLocationDataPromises: Array<Promise<any>> = [temperatureRequestPromise, rainfallRequestPromise];\n      Promise.all(compileWeatherLocationDataPromises)\n      .then((responses) => {\n        let weatherData: WeatherLocationData = new WeatherLocationData(location, rainfallData, temperatureData);\n        weatherLocationDataList.push(weatherData);\n      });\n      weatherPromises.push(rainfallRequestPromise);\n      weatherPromises.push(temperatureRequestPromise);\n    });\n    Promise.all(weatherPromises).then((responses) => {\n      this.onWeatherPollCompleteListeners.forEach((onWeatherPollCompleteListener) => {\n        onWeatherPollCompleteListener.onWeatherRetrieved(weatherLocationDataList);\n      }\n      );\n    });\n  } \n}\n// TODO: There are a lot of optional settings we can set in this builder\nclass Builder {\n  build(): Promise<MelbourneWeatherClient> {\n    return new Promise<MelbourneWeatherClient>((resolve, reject) => {\n      Soap.createClient('http://viper.infotech.monash.edu.au:8180/axis2/services/MelbourneWeather2?wsdl')\n      .then((weatherService: MelbourneWeatherServiceStub) => {\n        let melbourneWeatherClient: MelbourneWeatherClient = new MelbourneWeatherClient(weatherService);\n        resolve(melbourneWeatherClient);\n      })\n      .catch((error) => {\n        reject(error);\n      });\n    });\n  }\n}\n\nexport {Builder, MelbourneWeatherClient, OnWeatherRetrievedListener, OnLocationsRetrievedListener};\nexport default MelbourneWeatherClient;\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/backend/MelbourneWeatherClient.ts","import { Builder, OnWeatherRetrievedListener, OnLocationsRetrievedListener } from './MelbourneWeatherClient';\nimport { WeatherLocationData } from '../model/index';\nnew Builder()\n.build()\n.then(\n  (melbourneWeatherClient) => {\n    melbourneWeatherClient.addOnWeatherRetrievedListener(\n      new class implements OnWeatherRetrievedListener {\n        onWeatherRetrieved(weatherLocationDataList: Array<WeatherLocationData>) {\n        console.log('WHAT THE FUCK');\n\n        // console .log(weatherLocationDataList);\n        }\n      }\n    );\n    melbourneWeatherClient.addOnLocationsRetrievedListener(\n      new class implements OnLocationsRetrievedListener {\n        onLocationsRetrieved(locations: Array<string>) {\n        console.log('WHAT THE FUCK LOCATIONS');\n\n        // console.log(locations);\n          // Does calls.\n        setInterval(() => { melbourneWeatherClient.retrieveWeatherData(locations); }, 5000);\n        }\n      }\n    );\n    melbourneWeatherClient.retrieveLocations();\n  }\n);\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/backend/index.ts","class RainfallData {\n  rainfall: string;\n  timestamp: string;\n  constructor(rainfall: string, timestamp: string) {\n    this.rainfall = rainfall;\n    this.timestamp = timestamp;\n  }\n}\nexport {RainfallData};\nexport default RainfallData;\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/model/RainfallData.ts","class TemperatureData {\n  temperature: string;\n  timestamp: string;\n  constructor(temperature: string, timestamp: string) {\n    this.temperature = temperature;\n    this.timestamp = timestamp;\n  }\n}\nexport {TemperatureData};\nexport default TemperatureData;\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/model/TemperatureData.ts","import {RainfallData} from './RainfallData';\nimport {TemperatureData} from './TemperatureData';\nclass WeatherLocationData {\n    location: string;\n    rainfallData: RainfallData;\n    temperatureData: TemperatureData;\n    constructor(location: string, rainfallData: RainfallData, temperatureData: TemperatureData) {\n        this.location = location;   \n        this.rainfallData = rainfallData;\n        this.temperatureData = temperatureData;\n    }\n}\nexport {WeatherLocationData};\nexport default WeatherLocationData;\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/model/WeatherLocationData.ts","import {TemperatureData} from './TemperatureData';\nimport {RainfallData} from './RainfallData';\nimport {WeatherLocationData} from './WeatherLocationData';\nexport {TemperatureData};\nexport {RainfallData};\nexport {WeatherLocationData};\n\n\n\n// WEBPACK FOOTER //\n// node_modules/tslint-loader!./src/model/index.ts","module.exports = require(\"soap-as-promised\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"soap-as-promised\"\n// module id = 6\n// module chunks = 0"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A;;;;;;;;AChEA;AACA;AAmBA;;;AAGA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAkBA;AAhBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA;AACA;;;;;;;;;;ACvHA;AAEA;AAIA;AAEA;AACA;AAEA;AACA;AALA;AAQA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAPA;AAUA;AACA;;;;;;;;;;AC3BA;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACTA;AAGA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACPA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;ACbA;AAGA;AAFA;AAGA;AAFA;AAGA;;;;;;ACLA;;;A","sourceRoot":""}