{"version":3,"sources":["webpack:///webpack/bootstrap 675d4064a0bb12253a4a","webpack:///external \"chalk\"","webpack:///./src/model/TimestampedData.ts","webpack:///./src/model/WeatherLocationData.ts","webpack:///./src/backend/FullLambdaService.ts","webpack:///./src/weather_client/test/TestWeatherClientFactory.ts","webpack:///external \"socket.io\"","webpack:///./src/backend/index-test.ts","webpack:///./src/model/RainfallData.ts","webpack:///./src/model/RainfallRequestData.ts","webpack:///./src/model/RequestError.ts","webpack:///./src/model/RequestResponse.ts","webpack:///./src/model/TemperatureData.ts","webpack:///./src/model/TemperatureRequestData.ts","webpack:///./src/monitor/LocationMonitoringManager.ts","webpack:///./src/monitor/SessionMonitoringManager.ts","webpack:///./src/socket.io/socket-keys.ts","webpack:///./src/weather_client/test/TestWeatherClient.ts"],"names":[],"mappings":"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","file":"backend-compiled-debug.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 675d4064a0bb12253a4a","module.exports = require(\"chalk\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"chalk\"\n// module id = 0\n// module chunks = 0","abstract class TimestampedData {\r\n  public readonly timestamp: string;\r\n\r\n  constructor(timestamp: string) {\r\n    if (timestamp === '') {\r\n      // Handle no data from SOAP client.\r\n      this.timestamp = 'N/A';\r\n    } else {\r\n      this.timestamp = timestamp;\r\n    }\r\n  }\r\n}\r\n\r\nexport {TimestampedData};\r\nexport default TimestampedData;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/model/TimestampedData.ts","import { RainfallData } from './RainfallData';\r\nimport { TemperatureData } from './TemperatureData';\r\n/**\r\n * Class that represents weather data.\r\n * Has a location, RainfallData object and TemperatureData object.\r\n */\r\nclass WeatherLocationData {\r\n  public readonly location: string;\r\n  public readonly rainfallData?: RainfallData;\r\n  public readonly temperatureData?: TemperatureData;\r\n\r\n  constructor(location: string, rainfallData?: RainfallData, temperatureData?: TemperatureData) {\r\n    this.location = location;\r\n    this.rainfallData = rainfallData;\r\n    this.temperatureData = temperatureData;\r\n  } \r\n}\r\n\r\nexport {WeatherLocationData};\r\nexport default WeatherLocationData;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/model/WeatherLocationData.ts","import * as chalk from 'chalk';\r\n\r\nimport { LocationMonitoringManager } from '../monitor/LocationMonitoringManager';\r\nimport { MonitorMetadata } from '../model/MonitorMetadata';\r\nimport { RequestError } from '../model/RequestError';\r\nimport { RequestResponse } from '../model/RequestResponse';\r\nimport { SessionMonitoringManager } from '../monitor/SessionMonitoringManager';\r\nimport { WeatherClient } from '../weather_client/WeatherClient';\r\nimport { WeatherClientFactory } from '../weather_client/WeatherClientFactory';\r\nimport { WeatherLocationData } from '../model/WeatherLocationData';\r\nimport SocketKeys from '../socket.io/socket-keys';\r\n\r\n// TODO: Consider if having soft dependencies on Temp & Rainfall & their request data types is better\r\n// allows for dependency injection where you pass in req parameters.\r\n\r\n// 300000 milliseconds = 5 mins.\r\nconst defaultWeatherPollingInterval: number = 5000;\r\n// const defaultSoapClientCreationRetries: number = 20;\r\n// const defaultSoapClientRetryInterval: number = 30000;\r\n\r\n/**\r\n * Controller class instantiated by the node server.\r\n */\r\nclass FullLambdaService {\r\n  private readonly weatherClientFactory: WeatherClientFactory<WeatherClient>;\r\n  private readonly rainfallSessionManager: SessionMonitoringManager;\r\n  private readonly temperatureSessionManager: SessionMonitoringManager;\r\n  // Convention to call SocketIO.Server io.\r\n  private readonly io: SocketIO.Server;\r\n  // All locations retrieved from SOAP client.\r\n  private melbourneWeatherLocations: string[] = [];\r\n  private succesfulSoapClientconnection: boolean;\r\n  private weatherClient: WeatherClient;\r\n\r\n  constructor(\r\n    io: SocketIO.Server, \r\n    weatherClientFactory: WeatherClientFactory<WeatherClient>,\r\n    sessionManager: SessionMonitoringManager = new SessionMonitoringManager(),\r\n    rainfallSessionManager: SessionMonitoringManager = new SessionMonitoringManager(),\r\n    temperatureSessionManager: SessionMonitoringManager = new SessionMonitoringManager()\r\n  ) {\r\n    this.succesfulSoapClientconnection = false;\r\n    this.melbourneWeatherLocations = [];\r\n    this.rainfallSessionManager = sessionManager;\r\n    this.io = io;\r\n    this.weatherClientFactory = weatherClientFactory;\r\n    this.temperatureSessionManager = temperatureSessionManager;\r\n  }\r\n  \r\n  /**\r\n   * Setup websocket endpoints using SocketIO.\r\n   */\r\n  private initialiseSocketEndpoints(): void {\r\n    this.io.sockets.on('connection', (socket: SocketIO.Socket): void => {  \r\n      // Called when session started with frontend.\r\n      const sessionId: string = socket.id;\r\n      console.log(`Session started ${sessionId}`);\r\n      this.io.emit(SocketKeys.retrievedLocations, this.melbourneWeatherLocations);\r\n      // Add MonitoringManager to manage session with front end client.\r\n      this.rainfallSessionManager.addMonitoringSession(sessionId, new LocationMonitoringManager());\r\n      this.temperatureSessionManager.addMonitoringSession(sessionId, new LocationMonitoringManager());\r\n      this.initialiseMonitorSocketEvent(\r\n        socket,\r\n        SocketKeys.addRainfallMonitor, \r\n        SocketKeys.removeRainfallMonitor, \r\n        this.rainfallSessionManager\r\n      );\r\n\r\n      this.initialiseMonitorSocketEvent(\r\n        socket,\r\n        SocketKeys.addTemperatureMonitor,\r\n        SocketKeys.removeTemperatureMonitor,\r\n        this.temperatureSessionManager\r\n      );\r\n\r\n      socket.on('disconnect', () => {\r\n        console.log(`Session ended: ${sessionId}`);\r\n        this.rainfallSessionManager.removeMonitoringSession(sessionId);\r\n        this.temperatureSessionManager.removeMonitoringSession(sessionId);\r\n      });\r\n\r\n      // Emit to front end whether the SOAP Client was successfully created.\r\n      this.io.emit(SocketKeys.soapClientCreationSuccess, this.succesfulSoapClientconnection);\r\n    });\r\n  }\r\n\r\n  private initialiseMonitorSocketEvent(\r\n    socket: SocketIO.Socket,\r\n    addEventName: string, \r\n    removeEventName: string,\r\n    sessionManager: SessionMonitoringManager\r\n  ) {\r\n    const sessionId = socket.id;\r\n    socket.on(addEventName, (monitor: MonitorMetadata) => {\r\n      try {\r\n        // Frontend sessions wants to monitor another location.\r\n        // monitor is a string that is a location.\r\n        const locationMonitoringManager: LocationMonitoringManager | undefined = \r\n        sessionManager.getLocationMonitorManagerForSession(sessionId);\r\n        if (locationMonitoringManager) {\r\n          console.log(`Session ID ${chalk.magenta(sessionId)} added monitor ${chalk.magenta(monitor.location)}`);\r\n          // Can add monitor.\r\n          // Add new location to monitor to all locations that are monitored.\r\n          locationMonitoringManager.addMonitorLocation(monitor);\r\n          const rainfallLocationManager: LocationMonitoringManager \r\n            = this.rainfallSessionManager.getLocationMonitorManagerForSession(sessionId);\r\n          const temperatureLocationMonitor: LocationMonitoringManager \r\n            = this.temperatureSessionManager.getLocationMonitorManagerForSession(sessionId);\r\n          this.weatherClient.retrieveWeatherLocationData(\r\n            monitor.location,\r\n            rainfallLocationManager.getMonitoredLocations().has(monitor.location), \r\n            temperatureLocationMonitor.getMonitoredLocations().has(monitor.location),\r\n            false\r\n          ).then((weatherLocationData) => {\r\n            socket.emit(addEventName, new RequestResponse(weatherLocationData, null));\r\n          }).catch((error) => {\r\n            console.error(chalk.red(error.message));\r\n            console.error(chalk.red(error.stack));\r\n          });\r\n        } else {\r\n          // Can't add monitor.\r\n          console.error(`${chalk.red('Could add monitor. No session for ID: ')}${chalk.magenta(sessionId)}`);\r\n          const requestError = new RequestError(`Could add monitor ${monitor}.`, `No session for ID: ' ${sessionId}`);\r\n          const response = new RequestResponse(null, requestError);\r\n          socket.emit(addEventName, response);\r\n        }\r\n      } catch (error) {\r\n        const requestError = new RequestError(`Failed to add monitor for location ${monitor}`, error.message);\r\n        const response = new RequestResponse(null, requestError);\r\n        console.error(chalk.red(error.message));\r\n        console.error(chalk.red(error.stack));\r\n        socket.emit(addEventName, response);\r\n      }\r\n    });\r\n    \r\n    socket.on(removeEventName, (monitor: MonitorMetadata) => {\r\n      // monitor is a string that is a location.\r\n      // Frontend emitted remove_monitor with MonitorMetadata.\r\n      try {\r\n        // Note: | means can be type_a or type_b where type_a | type_b.\r\n        const locationMonitoringManager: LocationMonitoringManager | undefined = \r\n        sessionManager.getLocationMonitorManagerForSession(sessionId);\r\n        if (locationMonitoringManager) {\r\n          console.log(\r\n            `Session ID ${chalk.magenta(sessionId)} ` +\r\n            `removed ${chalk.magenta(removeEventName)} monitor ${chalk.magenta(monitor.location)}`\r\n          );\r\n          // Can remove location.\r\n          locationMonitoringManager.removeMonitoredLocation(monitor);\r\n          socket.emit(removeEventName, new RequestResponse(monitor, null));\r\n        } else {\r\n          // Can't remove location.\r\n          console.error(`${chalk.red('Could remove monitor. No session for ID: ')}${chalk.magenta(sessionId)}`);\r\n          const requestError = new RequestError(\r\n            `Could remove monitor ${monitor}.`,\r\n            `No session for ID: ' ${sessionId}`\r\n          );\r\n          const response = new RequestResponse(null, requestError);\r\n          socket.emit(removeEventName, response);\r\n        }\r\n      } catch (error) {\r\n        const requestError = new RequestError(\r\n          `Failed to remove monitor for location ${monitor}`, \r\n          error.message\r\n        );\r\n        const response = new RequestResponse(null, requestError);\r\n        console.error(chalk.red(error.message));\r\n        console.error(chalk.red(error.stack));\r\n        socket.emit(removeEventName, response);\r\n      }\r\n    });\r\n  }\r\n\r\n  private onAllLocationsRetrieved(locations: string[]) {\r\n    // Retrieves all locations from SOAP client points.\r\n    // Only called once, under the assumption locations are set.\r\n    this.melbourneWeatherLocations = locations;\r\n    this.melbourneWeatherLocations.sort();\r\n    // Send locations to front end.\r\n    this.io.sockets.emit(SocketKeys.retrievedLocations, locations);\r\n    console.log(chalk.cyan(`locations: ${locations}`));\r\n    // setInterval() is a JavaScript method that runs the method every msInterval milliseconds.\r\n    // Note: setInterval() doesn't get data at time 0.\r\n    this.retrieveAllMonitoredWeatherData();\r\n    setInterval(\r\n      (): void => { this.retrieveAllMonitoredWeatherData(); },\r\n      defaultWeatherPollingInterval \r\n    );  \r\n  }\r\n\r\n  private onWeatherLocationDataRetrieved(weatherLocationDataList: WeatherLocationData[]) {\r\n    // Logs timestamp and weatherLocationDataList in backend before sending data to frontend.\r\n    // Send updated data to front end.\r\n    const retrievedDataTimeStamp: string = new Date().toString();\r\n    console.log(\r\n      chalk.green('Retrieved') +\r\n      chalk.magenta(` ${weatherLocationDataList.length} `) +\r\n      chalk.green('weather data items at time:') +\r\n      chalk.magenta(` ${retrievedDataTimeStamp} `)\r\n    );\r\n    // Note: sockets.sockets is a Socket IO library attribute.\r\n    for (const sessionId of Object.keys(this.io.sockets.sockets)) {\r\n      try {\r\n        console.info(`Getting monitoring session for session ID: ${chalk.magenta(sessionId)}`);\r\n        const rainfallMonitoringSession: LocationMonitoringManager | undefined = \r\n          this.rainfallSessionManager.getLocationMonitorManagerForSession(sessionId);\r\n        const temperatureMonitoringSession: LocationMonitoringManager | undefined = \r\n          this.temperatureSessionManager.getLocationMonitorManagerForSession(sessionId);\r\n        if (rainfallMonitoringSession && temperatureMonitoringSession) {\r\n          const rainfallToEmitWeatherFor: Set<string> = rainfallMonitoringSession.getMonitoredLocations();\r\n          const temperatureToEmitWeatherFor: Set<string> = temperatureMonitoringSession.getMonitoredLocations();\r\n          // We only need to emit data if the user is monitoring a location.\r\n          // Otherwise don't even bother executing the emission code.\r\n          if (rainfallToEmitWeatherFor.size > 0 && temperatureToEmitWeatherFor.size > 0) {\r\n            const weatherDataToEmit: WeatherLocationData[] = [];\r\n            for (const weatherData of weatherLocationDataList) {\r\n              const emitRainfall: boolean = rainfallToEmitWeatherFor.has(weatherData.location);\r\n              const emitTemperature: boolean = temperatureToEmitWeatherFor.has(weatherData.location);\r\n              if (emitTemperature && emitRainfall) {\r\n                weatherDataToEmit.push(weatherData);\r\n              } else if (emitRainfall) {\r\n                weatherDataToEmit.push(new WeatherLocationData(\r\n                  weatherData.location,\r\n                  weatherData.rainfallData,\r\n                  null\r\n                ));\r\n              } else if (emitTemperature) {\r\n                weatherDataToEmit.push(new WeatherLocationData(\r\n                  weatherData.location,\r\n                  null,\r\n                  weatherData.temperatureData\r\n                ));\r\n              }\r\n            }\r\n            const socket = this.io.sockets.sockets[sessionId];\r\n            socket.emit(SocketKeys.replaceWeatherData, weatherDataToEmit);\r\n          } else {\r\n            console.log(\r\n              `Session ID ${chalk.magenta(sessionId)} wasn't monitoring anything, skipping emission.`\r\n            );\r\n          }\r\n        } else {\r\n          console.error(\r\n            chalk.red(`Socket ${chalk.magenta(sessionId)} had no monitoring session. Skipping emit.`)\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(chalk.bgRed(error.message));\r\n        console.error(chalk.red(error.stack));\r\n      }\r\n    }\r\n  }\r\n\r\n  private getAllMonitoredLocations(): Set<string> {\r\n    const unionedMonitoredLocations: Set<string> = new Set<string>();\r\n    for (const rainfallLocation of this.rainfallSessionManager.getMonitoredLocations()) {\r\n      unionedMonitoredLocations.add(rainfallLocation);\r\n    }\r\n    for (const temperatureLocation of this.temperatureSessionManager.getMonitoredLocations()) {\r\n      unionedMonitoredLocations.add(temperatureLocation);\r\n    }\r\n    return unionedMonitoredLocations;\r\n  }\r\n\r\n  private getAllMonitoredLocationsList(): string[] {\r\n    const locationsSet: Set<string> = this.getAllMonitoredLocations();\r\n    const locationIterator: IterableIterator<string> = locationsSet.values();\r\n    const locationsList: string[] = [];\r\n    for (let l = 0; l < locationsSet.size; l++) {\r\n      locationsList[l] = locationIterator.next().value;\r\n    }\r\n    return locationsList;\r\n  }\r\n\r\n  private retrieveAllMonitoredWeatherData(): void {\r\n    this.weatherClient.retrieveWeatherLocationDataList(this.getAllMonitoredLocationsList())\r\n      .then((weatherLocationDataList) => {\r\n        this.onWeatherLocationDataRetrieved(weatherLocationDataList);\r\n      }).catch((error) => {\r\n        console.error(chalk.red(error));\r\n        console.error(chalk.red(error.stack));\r\n      });\r\n  }\r\n\r\n  public onSoapWeatherClientInitialised(weatherClient: WeatherClient): void {\r\n      console.log(chalk.green('SOAP weather client created'));\r\n      this.weatherClient = weatherClient;\r\n      // This lets any consumers of the API know that we reset the server\r\n      this.onAllLocationsRetrieved([]);\r\n      this.onWeatherLocationDataRetrieved([]);\r\n      // Initialise the socket.io events\r\n      this.initialiseSocketEndpoints();\r\n      // When SOAP Client is resolved which returns melbourneWeatherClient from an async call.\r\n      this.succesfulSoapClientconnection = true;\r\n      this.io.emit(SocketKeys.soapClientCreationSuccess, this.succesfulSoapClientconnection);\r\n      // Get locations from SOAP client in melbourneWeatherClient.\r\n      weatherClient.retrieveLocations().then((locations: string[]) => {\r\n        this.onAllLocationsRetrieved(locations);\r\n      });\r\n\r\n  }\r\n  /**\r\n   * Runs main loop for the full lambda service via setInterval.\r\n   */\r\n  public run(): void {\r\n    // Make MelbourneWeatherClient that has a SOAP Client.\r\n    this.weatherClientFactory.createWeatherClient()\r\n      .then((weatherClient: WeatherClient): void => {\r\n        this.onSoapWeatherClientInitialised(weatherClient);\r\n      })\r\n      .catch((error) => {\r\n        console.error(chalk.bgRed('Failed to create SOAP client connection'));\r\n        console.error(chalk.red(error.message));\r\n        console.error(chalk.red(error.stack));\r\n      });\r\n  }\r\n}\r\n\r\nexport {FullLambdaService};\r\nexport default FullLambdaService;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/backend/FullLambdaService.ts","import { WeatherClientFactory } from '../WeatherClientFactory';\r\nimport { TestWeatherClient } from './TestWeatherClient';\r\n/**\r\n * \r\n */\r\nclass TestWeatherClientFactory implements WeatherClientFactory<TestWeatherClient> {\r\n  public createWeatherClient(): Promise<TestWeatherClient> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve(new TestWeatherClient());\r\n    });\r\n  }\r\n}\r\nexport { TestWeatherClientFactory };\r\nexport default TestWeatherClientFactory;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/weather_client/test/TestWeatherClientFactory.ts","module.exports = require(\"socket.io\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"socket.io\"\n// module id = 5\n// module chunks = 0","import * as SocketIo from 'socket.io';\r\nimport * as chalk from 'chalk';\r\n\r\nimport { FullLambdaService } from './FullLambdaService';\r\nimport { TestWeatherClientFactory } from '../weather_client/test/TestWeatherClientFactory';\r\n\r\nconsole.log(chalk.cyan('Starting test server...'));\r\nnew FullLambdaService(\r\n  SocketIo.listen(8080), \r\n  new TestWeatherClientFactory()\r\n).run();\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/backend/index-test.ts","import { TimestampedData } from './TimestampedData';\r\n/**\r\n * Class that represents rainfall data.\r\n */\r\nclass RainfallData extends TimestampedData {\r\n  public readonly rainfall: string;\r\n\r\n  constructor(rainfall: string, timestamp: string) {\r\n    super(timestamp);\r\n\r\n    if (rainfall === '') {\r\n      // Handle no data from SOAP client.\r\n      this.rainfall = 'N/A';\r\n    } else {\r\n      this.rainfall = rainfall;\r\n    }\r\n  }  \r\n}\r\n\r\nexport {RainfallData};\r\nexport default RainfallData;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/model/RainfallData.ts","/**\r\n * Class to hold data to be sent to SOAP client to retrieve rainfall data.\r\n */\r\nclass RainfallRequestData {\r\n  public readonly parameters: string;\r\n  constructor(parameters: string) {\r\n    this.parameters = parameters;\r\n  }\r\n}\r\n\r\nexport {RainfallRequestData};\r\nexport default RainfallRequestData;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/model/RainfallRequestData.ts","/**\r\n * Class used to hold error to be sent to frontend after a request from the frontend.\r\n */\r\nclass RequestError {\r\n  public readonly message;\r\n  public readonly stackMessage;\r\n\r\n  constructor(stackMessage: string, message: string) {\r\n    this.message = message;\r\n    this.stackMessage = stackMessage;\r\n\r\n  }\r\n}\r\n\r\nexport {RequestError};\r\nexport default RequestError;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/model/RequestError.ts","import {RequestError} from './RequestError';\r\n/**\r\n * Class used to hold response to be sent to frontend after a request from the frontend.\r\n */\r\nclass RequestResponse<T> {\r\n  public readonly data: T;\r\n  public readonly error: RequestError | null;\r\n  constructor(data: T, error: RequestError) {\r\n    this.data = data;\r\n    this.error = error;\r\n  }\r\n}\r\n\r\nexport {RequestResponse};\r\nexport default RequestResponse;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/model/RequestResponse.ts","import {TimestampedData} from './TimestampedData';\r\n/**\r\n * Class that represents temperature data.\r\n */\r\nclass TemperatureData extends TimestampedData {\r\n  public readonly temperature: string;\r\n\r\n  constructor(temperature: string, timestamp: string) {\r\n    super(timestamp);\r\n    \r\n    if (temperature === '') {\r\n      this.temperature = 'N/A';\r\n    } else {\r\n      this.temperature = temperature;\r\n    }\r\n  }\r\n}\r\n\r\nexport {TemperatureData};\r\nexport default TemperatureData;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/model/TemperatureData.ts","/**\r\n * Class to hold data to be sent to SOAP client to retrieve temperature data.\r\n */\r\nclass TemperatureRequestData {\r\n  public readonly parameters: string;\r\n  constructor(parameters: string) {\r\n    this.parameters = parameters;\r\n  }\r\n}\r\n\r\nexport {TemperatureRequestData};\r\nexport default TemperatureRequestData;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/model/TemperatureRequestData.ts","import { MonitorMetadata } from '../model/MonitorMetadata';\r\n\r\ninterface OnAddedMonitoredLocationObserver {\r\n  onAddedMonitoredLocation(monitor: MonitorMetadata): void;\r\n}\r\n\r\ninterface OnRemovedMonitoredLocationObserver {\r\n  onRemovedMonitoredLocation(monitor: MonitorMetadata): void;\r\n}\r\n\r\n/**\r\n * Controller class to monitor which locations are required to display data for, one instance for each frontend session.\r\n */\r\nclass LocationMonitoringManager {\r\n  private monitoredLocations: Map<string, MonitorMetadata>;\r\n  private onAddedMonitoredLocationObservers: Set<OnAddedMonitoredLocationObserver>;\r\n  private onRemovedMonitoredLocationObservers: Set<OnRemovedMonitoredLocationObserver>;\r\n\r\n  constructor() {\r\n    this.monitoredLocations = new Map<string, MonitorMetadata>();\r\n    this.onAddedMonitoredLocationObservers = new Set<OnAddedMonitoredLocationObserver>();\r\n    this.onRemovedMonitoredLocationObservers = new Set<OnRemovedMonitoredLocationObserver>();    \r\n  }\r\n\r\n  public getMonitoredLocations(): Set<string> {\r\n    const locationsSet: Set<string> = new Set<string>();\r\n    // monitoredLocations.keys() effectively returns the equivelant of Iterator<String> in Java\r\n    for (const monitoredLocation of this.monitoredLocations.keys()) {\r\n      locationsSet.add(monitoredLocation);\r\n    }\r\n    return locationsSet;\r\n  }\r\n\r\n  public addMonitorLocation(monitor: MonitorMetadata): void {\r\n    if (!this.monitoredLocations.has(monitor.location)) {\r\n      this.monitoredLocations.set(monitor.location, monitor);\r\n      for (const onAddedMonitoredLocationObserver of this.onAddedMonitoredLocationObservers) {\r\n        onAddedMonitoredLocationObserver.onAddedMonitoredLocation(monitor);\r\n      }\r\n    }\r\n  }\r\n\r\n  public removeMonitoredLocation(monitor: MonitorMetadata): void {\r\n    if (this.monitoredLocations.has(monitor.location)) {\r\n      this.monitoredLocations.delete(monitor.location);\r\n      for (const onRemovedMonitoredLocationObserver of this.onRemovedMonitoredLocationObservers) {\r\n        onRemovedMonitoredLocationObserver.onRemovedMonitoredLocation(monitor);\r\n      }\r\n    }\r\n  }\r\n\r\n  public addOnAddedMonitoredLocationObserver(observer: OnAddedMonitoredLocationObserver): void {\r\n    this.onAddedMonitoredLocationObservers.add(observer);\r\n  }\r\n\r\n  public removeOnAddedMonitoredLocationObserver(observer: OnAddedMonitoredLocationObserver): void {\r\n    this.onAddedMonitoredLocationObservers.delete(observer);\r\n  }\r\n\r\n  public addOnRemovedMonitoredLocationObserver(observer: OnRemovedMonitoredLocationObserver): void {\r\n    this.onRemovedMonitoredLocationObservers.add(observer);\r\n  }\r\n\r\n  public removeOnRemovedMonitoredLocationObserver(observer: OnRemovedMonitoredLocationObserver): void {\r\n    this.onRemovedMonitoredLocationObservers.delete(observer);\r\n  }\r\n}\r\nexport {LocationMonitoringManager, OnAddedMonitoredLocationObserver, OnRemovedMonitoredLocationObserver};\r\nexport default LocationMonitoringManager;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/monitor/LocationMonitoringManager.ts","import {\r\n  LocationMonitoringManager,\r\n  OnAddedMonitoredLocationObserver,\r\n  OnRemovedMonitoredLocationObserver,\r\n} from './LocationMonitoringManager';\r\n\r\nimport { MonitorMetadata } from '../model/MonitorMetadata';\r\n\r\n/**\r\n * Controller class to monitor all sessions, keeps track of LocationMonitorManager based on session ids.\r\n */\r\nclass SessionMonitoringManager {\r\n  private readonly monitoringSessions: Map<string, LocationMonitoringManager>;\r\n  private readonly sessionMonitoringLocationCounts: Map<string, number>;\r\n  private readonly onAddedMonitoredLocationObserver: OnAddedMonitoredLocationObserver;\r\n  private readonly onRemovedMonitoredLocationObserver: OnRemovedMonitoredLocationObserver;\r\n\r\n  constructor() {\r\n    this.monitoringSessions = new Map<string, LocationMonitoringManager>();\r\n    this.sessionMonitoringLocationCounts = new Map<string, number>();\r\n    const that: SessionMonitoringManager = this;\r\n    this.onAddedMonitoredLocationObserver = new class implements OnAddedMonitoredLocationObserver {\r\n      public onAddedMonitoredLocation(monitor: MonitorMetadata): void {\r\n        that.addMonitoredLocation(monitor);\r\n      }\r\n    }();\r\n\r\n    this.onRemovedMonitoredLocationObserver = new class implements OnRemovedMonitoredLocationObserver {\r\n      public onRemovedMonitoredLocation(monitor: MonitorMetadata): void {\r\n        that.removeMonitoredLocation(monitor);\r\n      }\r\n    }();\r\n  }\r\n\r\n  public incrementLocationCountFromMonitor(monitor: MonitorMetadata, amountIncremented: number): void {\r\n    this.incrementLocationCount(monitor.location, amountIncremented);\r\n  }\r\n\r\n  public incrementLocationCount(monitoredLocation: string, amountIncremented: number): void {\r\n    const retrievedMonitoringCount: number | undefined = \r\n      this.sessionMonitoringLocationCounts.get(monitoredLocation);\r\n    const sessionMonitoringLocationCount: number \r\n      = retrievedMonitoringCount !== undefined ? retrievedMonitoringCount : 0;\r\n    this.sessionMonitoringLocationCounts.set(monitoredLocation, sessionMonitoringLocationCount + amountIncremented);\r\n  }\r\n  \r\n  public getLocationMonitorManagerForSession(sessionId: string): LocationMonitoringManager | undefined {\r\n    return this.monitoringSessions.get(sessionId);\r\n  }\r\n\r\n  public addMonitoringSession(sessionId: string, monitoringSession: LocationMonitoringManager): void {\r\n    if (!(sessionId in this.monitoringSessions)) {\r\n      this.monitoringSessions.set(sessionId, monitoringSession);\r\n      for (const monitoredLocation of monitoringSession.getMonitoredLocations().keys()) {\r\n        this.incrementLocationCount(monitoredLocation, 1);\r\n      }\r\n      monitoringSession.addOnAddedMonitoredLocationObserver(this.onAddedMonitoredLocationObserver);\r\n      monitoringSession.addOnRemovedMonitoredLocationObserver(this.onRemovedMonitoredLocationObserver);\r\n    } else {\r\n      throw new Error(`Monitoring session with session ID ${sessionId} already exists within the session manager`);\r\n    }\r\n  }\r\n  public removeMonitoringSession(sessionId: string): void {\r\n    const monitoringSession: LocationMonitoringManager | undefined = this.monitoringSessions.get(sessionId);\r\n    if (monitoringSession) {\r\n      monitoringSession.removeOnAddedMonitoredLocationObserver(this.onAddedMonitoredLocationObserver);\r\n      monitoringSession.removeOnRemovedMonitoredLocationObserver(this.onRemovedMonitoredLocationObserver);\r\n      this.monitoringSessions.delete(sessionId);\r\n      for (const monitoredLocation of monitoringSession.getMonitoredLocations().keys()) {\r\n        this.incrementLocationCount(monitoredLocation, -1);\r\n      }\r\n    } else {\r\n      throw new Error(`No monitoring session with session id ${sessionId}`);\r\n    }\r\n  }\r\n\r\n  public getMonitoredLocations(): Set<string> {\r\n    const monitoredLocations: Set<string> = new Set<string>();\r\n    for (const location of this.sessionMonitoringLocationCounts.keys()) {\r\n      const monitoringCount: number | undefined = this.sessionMonitoringLocationCounts.get(location);\r\n      console.log(`${location} has ${monitoringCount} sessions monitoring it.`);\r\n      if (monitoringCount !== undefined) {\r\n        if (monitoringCount > 0) {\r\n          monitoredLocations.add(location);\r\n        }\r\n      } else {\r\n        throw new Error(`Has key ${location} but count is ${monitoringCount}`);\r\n      }\r\n    }\r\n    return monitoredLocations;\r\n  }\r\n\r\n  private removeMonitoredLocation(monitor: MonitorMetadata): void {\r\n    this.incrementLocationCountFromMonitor(monitor, -1);\r\n  }\r\n\r\n  private addMonitoredLocation(monitor: MonitorMetadata): void {\r\n    if (!(monitor.location in this.sessionMonitoringLocationCounts)) {\r\n      this.sessionMonitoringLocationCounts.set(monitor.location, 1);\r\n    } else {\r\n      this.incrementLocationCountFromMonitor(monitor, 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport {SessionMonitoringManager};\r\nexport default SessionMonitoringManager;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/monitor/SessionMonitoringManager.ts","const keys = {\r\n  addRainfallMonitor: 'add_rainfall_monitor',\r\n  addTemperatureMonitor: 'add_temperature_monitor',\r\n  removeRainfallMonitor: 'remove_rainfall_monitor', \r\n  removeTemperatureMonitor: 'remove_temperature_monitor',\r\n  replaceWeatherData: 'replace_weather_data',\r\n  retrievedLocations: 'locations',\r\n  soapClientCreationSuccess: 'soap_client_creation_success'\r\n};\r\nexport default keys; \r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/socket.io/socket-keys.ts","import { WeatherClient } from '../WeatherClient';\r\nimport { WeatherLocationData } from '../../model/WeatherLocationData';\r\nimport { RainfallData } from '../../model/RainfallData';\r\nimport { TemperatureData } from '../../model/TemperatureData';\r\nimport { RainfallRequestData } from '../../model/RainfallRequestData';\r\nimport { TemperatureRequestData } from '../../model/TemperatureRequestData';\r\n\r\n/**\r\n * Sometimes the SOAP API is down so we needed to create an extra client so that we could use offline dummy data \r\n * while we wait for the SOAP API to turn on again.\r\n * On top of that we also have needed to run tests independant of the SOAP client.\r\n */\r\nclass TestWeatherClient implements WeatherClient {\r\n  private createDummyRainfallData(rainfallRequestData: RainfallRequestData): RainfallData {\r\n    return new RainfallData(\r\n      `Rainfall ${rainfallRequestData.parameters}`,\r\n      `Rainfall timestamp ${new Date().toString()}`\r\n    );\r\n  }\r\n\r\n  private createDummyTemperatureData(temperatureRequestData: TemperatureRequestData): TemperatureData {\r\n    return new TemperatureData(\r\n      `Temperature ${temperatureRequestData.parameters}`,\r\n      `Temperature timestamp ${new Date().toString()}`\r\n    );\r\n  }\r\n\r\n  public retrieveLocations(): Promise<string[]> {\r\n    return new Promise((resolve, reject) => {\r\n      const dummyLocations: string[] = [];\r\n      for (let l = 0; l < 15; l++) {\r\n        dummyLocations.push(`Location ${l}`);\r\n      }\r\n      resolve(dummyLocations);\r\n    });\r\n  }\r\n\r\n  public retrieveWeatherLocationData(\r\n    location: string, \r\n    getRainfall: boolean = true, \r\n    getTemperature: boolean = true\r\n  ): Promise<WeatherLocationData> {\r\n    return new Promise<WeatherLocationData>((resolve, reject) => {\r\n      resolve(new WeatherLocationData(\r\n          location,\r\n          getRainfall ? this.createDummyRainfallData(new RainfallRequestData(location)) : null,\r\n          getTemperature ? this.createDummyTemperatureData(new TemperatureRequestData(location)) : null\r\n      ));\r\n    });\r\n  }\r\n\r\n  public retrieveWeatherLocationDataList(locations: string[]): Promise<WeatherLocationData[]> {\r\n    return new Promise<WeatherLocationData[]>((resolve, reject) => {\r\n      const weatherPromises: Array<Promise<WeatherLocationData>> = [] ;\r\n      for (const location of locations) {\r\n        weatherPromises.push(this.retrieveWeatherLocationData(location));\r\n      }\r\n      resolve(Promise.all(weatherPromises));\r\n    });\r\n  }\r\n}\r\nexport { TestWeatherClient };\r\nexport default TestWeatherClient;\r\n\n\n\n// WEBPACK FOOTER //\n// ./~/tslint-loader!./src/weather_client/test/TestWeatherClient.ts"],"sourceRoot":""}